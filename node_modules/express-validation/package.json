{
  "_args": [
    [
      {
        "raw": "express-validation",
        "scope": null,
        "escapedName": "express-validation",
        "name": "express-validation",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "F:\\BloggersApp"
    ]
  ],
  "_from": "express-validation",
  "_hasShrinkwrap": false,
  "_id": "express-validation@3.0.5",
  "_location": "/express-validation",
  "_nodeVersion": "11.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/express-validation_3.0.5_1589876590799_0.946409553977436"
  },
  "_npmUser": {
    "name": "airasoul",
    "email": "andrew.keig@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "express-validation",
    "scope": null,
    "escapedName": "express-validation",
    "name": "express-validation",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/express-validation/-/express-validation-3.0.5.tgz",
  "_shasum": "6076994da4532d1aaa3d94228dff9e11b4a435d6",
  "_shrinkwrap": null,
  "_spec": "express-validation",
  "_where": "F:\\BloggersApp",
  "author": {
    "name": "Andrew Keig",
    "email": "andrew.keig@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/andrewkeig/express-validation/issues"
  },
  "dependencies": {
    "@hapi/joi": "17.x.x",
    "@types/express": "4.x.x",
    "@types/hapi__joi": "16.x.x"
  },
  "description": "express-validation is a middleware that validates a request and returns a response with errors; if any of the configured validation rules fail.",
  "devDependencies": {
    "benchmark": "^2.1.4",
    "body-parser": "^1.19.0",
    "cookie-parser": "^1.4.5",
    "cookie-signature": "^1.1.0",
    "eslint": "^6.8.0",
    "eslint-config-airbnb-base": "^14.1.0",
    "eslint-config-standard": "^14.1.1",
    "eslint-plugin-import": "^2.20.2",
    "eslint-plugin-jest": "^23.13.1",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-promise": "^4.2.1",
    "eslint-plugin-standard": "^4.0.1",
    "express": "^4.17.1",
    "husky": "^4.2.5",
    "jest": "^25.5.4",
    "lint-staged": "^10.2.4",
    "supertest": "4.0.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-ocVW374yzzqgNlTln0ZRt5e3dXkiV0SLIxXFSW6DsDURGomsQE/8Q9kR2VGaXeXViNTVj7dihpt4fB0mHVMzyg==",
    "shasum": "6076994da4532d1aaa3d94228dff9e11b4a435d6",
    "tarball": "https://registry.npmjs.org/express-validation/-/express-validation-3.0.5.tgz",
    "fileCount": 13,
    "unpackedSize": 17586,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJew5dvCRA9TVsSAnZWagAA+PAP/0SyG3ku2CasTf02lSYV\niIUkzAetUL2tYU1LhRGbGcP9PcmTjPCKTqoIiFtHcGsopEXf0QXLNmLABT+Q\n8yMz3IfW+yNmocMLHATnPOHSDsYlrk5VQWUTzt1xLqnlKy5z6N33ifjey5v/\nFuG8263FsSUWzdsMATtfRjFMFqhK+A57VR4iZEAECE1h7sZ0sXX+tX8KjYaf\n+LThBBpwv/a25NrmWWtHIGEJnX7xm1jAUB3oaTSMXJWjXiAZwuQ5TBDhXJ4T\nMx5jRyawusV+FklWHLYAMXW3KGqG+p/B2HpHGfeMMvDME+MpazQXPKZOY0BE\nNKuDBEXLu/eOo4dY0m38gHt6mhXQMqRDAACBi2ytBbRwIEtz2iVzp9b7nGyM\nkKXEb51t8Utum3BB5/fMH1rT/P5KuMfUtdp9hE8M8xIKfi1+4g7K2F2NDhjs\nUkuWaFJBhl/ZNGRLiSHjMagyysLDYu6goF2sF5gm/HELwzfaBChC15Y+m7w+\nEUVuMfDWq/eDSlgBGJSwBo3Lv/Y3ZAKabTMDaoriGUjxrCxblJOajxcOJElu\nOgP3nG4rgUWPqCGMGGNOaQp05Pdp2m1+qPfOMEshep1y9tZ7DH17kgfk7Ieo\nmdNGqfP61sPm9AREfA7IsrFBghH7XKO3Y7iTZaLB6CVWSw+QI8pjdi+kM0eU\nu7sq\r\n=yQHx\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "0edaed02643a4471c3b237ce3384aa563b713f8f",
  "homepage": "https://github.com/andrewkeig/express-validation",
  "husky": {
    "hooks": {
      "pre-commit": "npm run lint",
      "pre-push": "npm run lint"
    }
  },
  "jest": {
    "collectCoverageFrom": [
      "lib/**/*.{js,jsx}"
    ],
    "modulePathIgnorePatterns": [
      "__mocks__",
      "load"
    ]
  },
  "keywords": [
    "express",
    "validation",
    "validate",
    "joi",
    "middleware"
  ],
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/andrewkeig/express-validation/raw/master/LICENSE"
    }
  ],
  "main": "./lib/index",
  "maintainers": [
    {
      "name": "airasoul",
      "email": "andrew.keig@gmail.com"
    },
    {
      "name": "colthreepv",
      "email": "mister.gamer@gmail.com"
    }
  ],
  "name": "express-validation",
  "optionalDependencies": {},
  "readme": "express-validation\n==================\n\n[![Build Status](https://travis-ci.org/AndrewKeig/express-validation.svg?branch=master)](https://travis-ci.org/AndrewKeig/express-validation)\n[![npm module](https://badge.fury.io/js/express-validation.svg)](https://www.npmjs.org/package/express-validation)\n[![Current Version](https://flat.badgen.net/npm/v/express-validation?icon=npm)](https://www.npmjs.org/package/express-validation)\n[![airbnb-style](https://flat.badgen.net/badge/eslint/airbnb/ff5a5f?icon=airbnb)](https://github.com/airbnb/javascript)\n[![Coverage Status](https://coveralls.io/repos/github/AndrewKeig/express-validation/badge.svg)](https://coveralls.io/github/AndrewKeig/express-validation)\n[![npm downloads](https://img.shields.io/npm/dm/express-validation.svg?style=flat)](https://www.npmjs.com/package/express-validation)\n[![Known Vulnerabilities](https://snyk.io/test/github/AndrewKeig/express-validation/badge.svg?targetFile=package.json)](https://snyk.io/test/github/AndrewKeig/express-validation?targetFile=package.json)\n\n\n`express-validation` is an express middleware that validates a request and returns a response with errors; if any of the configured validation rules fail.\n\nWe use [joi](https://github.com/hapijs/joi/tree/master) to define validation rules. We have a hard dependency on Joi in order to avoid compatibility issues with Joi releases.  We are using snyk, which should help with this process.\n\nCurrently support Joi v17.x.x\n\n## Parameter types\nWe support validating the following parameter types:\n\n- headers\n- params (path)\n- query\n- cookies\n- signedCookies\n- body\n\n## Install\n\nInstall with npm:\n\n```sh\nnpm i express-validation --save\n```\n\nInstall with yarn:\n\n```sh\nyarn add express-validation\n```\n\n## Example\n\nIn order to setup and use `express-validation` consider the following simple express application. It has a single route; configured to use the `express-validation` middleware function `validate`; it accepts as input `loginValidation`; which defines validation rules for this route.\n\n\n```js\nconst express = require('express')\nconst bodyParser = require('body-parser')\nconst { validate, ValidationError, Joi } = require('express-validation')\n\nconst loginValidation = {\n  body: Joi.object({\n    email: Joi.string()\n      .email()\n      .required(),\n    password: Joi.string()\n      .regex(/[a-zA-Z0-9]{3,30}/)\n      .required(),\n  }),\n}\n\nconst app = express();\napp.use(bodyParser.json())\n\napp.post('/login', validate(loginValidation, {}, {}), (req, res) => {\n  res.json(200)\n})\n\napp.use(function(err, req, res, next) {\n  if (err instanceof ValidationError) {\n    return res.status(err.statusCode).json(err)\n  }\n\n  return res.status(500).json(err)\n})\n\napp.listen(3000)\n```\nWe have defined two rules `email` and `password`.  They are encapsulated inside `body`; which is important; as this defines their location within the request.\n\nWe also need to setup an express global error handler, `express-validation` will pass errors to this handler.  We can check within the handler for errors of type `validationError` distinguishing validation errors from other types of error.\n\n\n## Errors\n\n`express-validation`, by `default` will return errors in the following format, an object `details` keyed by `parameter`, each containing an array of errors in `joi` format.\n\n```json\n{\n      \"name\": \"ValidationError\",\n      \"message\": \"Validation Failed\",\n      \"statusCode\": 400,\n      \"error\": \"Bad Request\",\n      \"details\": {\n        \"body\": [\n          {\n            \"message\": \"\\\"password\\\" is not allowed to be empty\",\n            \"path\": [\n              \"password\"\n            ],\n            \"type\": \"string.empty\",\n            \"context\": {\n              \"label\": \"password\",\n              \"value\": \"\",\n              \"key\": \"password\"\n            }\n          }\n        ]\n      }\n    }\n```\n\nWe support other simpler formats via configuration\n\n- `keyByField`, flattens the error details object to a list of messages, keyed by field name\n\n```json\n{\n  \"name\": \"ValidationError\",\n  \"message\": \"Validation Failed\",\n  \"statusCode\": 400,\n  \"error\": \"Bad Request\",\n  \"details\": [\n    { \"accesstoken\": \"\\\"accesstoken\\\" is not allowed to be empty\" },\n    { \"password\": \"\\\"password\\\" is not allowed to be empty\" }\n  ]\n}\n```\n\n## API\n\n`express-validation` exposes the following api:\n\n### `validate(schema, [options], [joiOptions]) => [validationError]`\n\nThe exported `validate` function takes a `schema` object and two optional arguments,\n`options` and `joiOptions` and\nreturns a `validationError` instance if schema contains errors.\n\n#### `schema` (Object)\n\nDefault: `{}`\n\nIncludes validition rules, defined using `joi`, the rules are keyed by the following `parameter` types:\n  - headers\n  - params (path)\n  - query\n  - cookies\n  - signedCookies\n  - body\n\n\n#### `options` (Object)\n\nDefault: `{ context: false, statusCode: 400, keyByField: false }`\n\nOptions, used by `express-validation`:\n  - `context`, grants Joi access to the request object. This allows you to:\n      - reference other parts of the request in your validations, see [Joi.ref](https://hapi.dev/family/joi/api/?v=17.1.0#refkey-options) \n      - specify default values, see [Joi.default](https://hapi.dev/module/joi/api/#anydefaultvalue)\n      - will also cast values, e.g. strings to integer\n    - default { context: false } \n  - `statusCode`, defaults to `400`, this will also set the error message via nodes [status codes](https://nodejs.org/api/http.html#http_http_status_codes)\n    - default { statusCode: 400 }\n  - `keyByField`, flattens the error details object to a list of messages, keyed by field name\n\n\n#### `joiOptions` (Object)\n\nDefault: `{}`\n\nOptions, used by `joi`, see [Joi options](https://hapi.dev/family/joi/api/?v=17.1.0#anyvalidateasyncvalue-options), note:\n\n\n\n### `ValidationError`\nWe expose a custom error; `ValidationError`, use this in you global express error handler to distinguish validation errors from other types of error.\n\n\n### `Joi`\nWe also expose the version of Joi we have as a dependency, in order to avoid compatibility issues with other versions of Joi.\n\n\n\n## Examples\n\nFor more information on how to use `express-validation` please see the following examples:\n\n#### abortEarly\n[`abortEarly.test.js`](/__tests__/integration/abortEarly.test.js)\n\nYou can return multiple errors, not just the first encountered, by setting, the joi option `abortEarly: false`\n\n#### context\n[`context.test.js`](/__tests__/integration/context.test.js)\n\nEnabling the `context` in `options`, allows you to reference other parts of the request in your validation.\n\n#### defaults\n[`default.test.js`](/__tests__/integration/defaults.test.js)\n\nYou can specify `joi` `default` values in your schema.\n\n## License\n\nThis work is licensed under the MIT License (see the LICENSE file).\n\nhttps://github.com/AndrewKeig/express-validation/blob/master/LICENSE\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/andrewkeig/express-validation.git"
  },
  "scripts": {
    "benchmark": "node benchmarks/ev.js",
    "bubble": "load/bubble.sh",
    "coverage": "jest --coverage --runInBand",
    "flame": "load/flame.sh",
    "lint": "eslint 'lib/*.js'",
    "load-get": "load/get.sh",
    "load-post": "load/post.sh",
    "test": "jest",
    "test-single": "jest defaultValues.test.js",
    "test:watch": "jest --watch"
  },
  "types": "lib/index.d.ts",
  "typings": "lib/index",
  "version": "3.0.5"
}
