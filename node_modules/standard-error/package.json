{
  "_args": [
    [
      {
        "raw": "standard-error@1.1.0",
        "scope": null,
        "escapedName": "standard-error",
        "name": "standard-error",
        "rawSpec": "1.1.0",
        "spec": "1.1.0",
        "type": "version"
      },
      "F:\\BloggersApp\\node_modules\\archetype"
    ]
  ],
  "_from": "standard-error@1.1.0",
  "_id": "standard-error@1.1.0",
  "_inCache": true,
  "_location": "/standard-error",
  "_npmUser": {
    "name": "moll",
    "email": "andri@dot.ee"
  },
  "_npmVersion": "1.4.13",
  "_phantomChildren": {},
  "_requested": {
    "raw": "standard-error@1.1.0",
    "scope": null,
    "escapedName": "standard-error",
    "name": "standard-error",
    "rawSpec": "1.1.0",
    "spec": "1.1.0",
    "type": "version"
  },
  "_requiredBy": [
    "/archetype"
  ],
  "_resolved": "https://registry.npmjs.org/standard-error/-/standard-error-1.1.0.tgz",
  "_shasum": "23e5168fa1c0820189e5812701a79058510d0d34",
  "_shrinkwrap": null,
  "_spec": "standard-error@1.1.0",
  "_where": "F:\\BloggersApp\\node_modules\\archetype",
  "author": {
    "name": "Andri Möll",
    "email": "andri@dot.ee",
    "url": "http://themoll.com"
  },
  "bugs": {
    "url": "https://github.com/moll/js-standard-error/issues"
  },
  "dependencies": {},
  "description": "Tiny library that simplifies subclassing and inheriting from Error while keeping the correct name and stack. Also supports constructing from an object of properties. Saves you from boilerplate.",
  "devDependencies": {
    "mocha": ">= 1.18.0 < 2",
    "must": "< 1"
  },
  "directories": {},
  "dist": {
    "shasum": "23e5168fa1c0820189e5812701a79058510d0d34",
    "tarball": "https://registry.npmjs.org/standard-error/-/standard-error-1.1.0.tgz"
  },
  "gitHead": "fbee48fed75bd8e039b5a3f3a7e45f62b6d3b28d",
  "homepage": "https://github.com/moll/js-standard-error",
  "keywords": [
    "error",
    "exception"
  ],
  "licenses": [
    {
      "type": "LAGPL",
      "url": "https://github.com/moll/js-standard-error/blob/master/LICENSE"
    }
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "moll",
      "email": "andri@dot.ee"
    }
  ],
  "name": "standard-error",
  "optionalDependencies": {},
  "readme": "StandardError.js\n================\n[![NPM version][npm-badge]](http://badge.fury.io/js/standard-error)\n[npm-badge]: https://badge.fury.io/js/standard-error.png\n\nStandardError.js is a tiny JavaScript library that simplifies creating\nsubclasses of `Error` for **custom error classes** with the correct `name` and\n`stack` property. Saves you from writing a few lines of boilerplate.\n\n### Tour\n- Create **custom error classes** and add new behavior to them while keeping the\n  standard `Error` behavior in tact.\n- Add **extra properties** to the error by just passing in an object.\n- StandardError.js sets the error's **stack trace correctly**, even if your\n  error class **subclasses/inherits** from StandardError.  \n  Just inheriting from `Error` with `Object.create` breaks the stack trace.\n- Every `StandardError` instance is also an instance of `Error`.\n- Serializes all expected properties when passing it to `JSON.stringify`.  \n  Did you know that the default `Error` object serializes to an empty object\n  (`{}`)?\n- Works both in Node.js and browsers and sets the stack trace via\n  `Error.captureStackTrace` where available.\n\n\nInstalling\n----------\n```\nnpm install standard-error\n```\n\n\nUsing\n-----\nJust require StandardError.js and either use it directly or inherit from it for\nyour custom error class.\n\n### Throwing StandardError\nLike `Error`, `StandardError` takes a message argument, but in addition to that,\nyou may give it an object with other properties to be set:\n\n```javascript\nvar StandardError = require(\"standard-error\")\nthrow new StandardError(\"Not Found\", {code: 404})\n```\n\nThe thrown instance of `StandardError` will then have both the `message` and the\n`code` property.  \nIt'll also also have a `name` property set to `\"StandardError\"`.\n\nYou can skip the explicit `message` argument and give everything as an\nobject of properties:\n\n```javascript\nnew StandardError({message: \"Not Found\", code: 404})\n```\n\n**Note**: All properties besides `stack` will be enumerable for easier\nserialization with `JSON.stringify`. That includes the `name` property which\nwill be set from the constructor's name (defaults to `\"StandardError\"`).\n\n### Subclassing and inheriting from StandardError\nThe real benefit of StandardError.js comes from subclassing it to create new\nerror classes and adding custom behavior to them.\n\nLet's create an `HttpError` that we can instantiate with the HTTP status code\n(`new HttpError(404)`) and have it set the message automatically based on that:\n\n```javascript\nvar Http = require(\"http\")\nvar StandardError = require(\"standard-error\")\n\nfunction HttpError(code, msg) {\n  StandardError.call(this, msg || Http.STATUS_CODES[code], {code: code})\n}\n\nHttpError.prototype = Object.create(StandardError.prototype, {\n  constructor: {value: HttpError, configurable: true, writable: true}\n})\n```\n\n**Note** that you must set the `constructor` property like in the above\nexample. First, that's the proper way to subclass in JavaScript and second,\nStandardError.js depends on that to know which functions to skip in the stack\ntrace.\n\n#### Name\n\nStandardError.js finds out the name (`err.name`) of your subclassed error from\nits constructor function. However, if you minify your code, you can also set or\nchange it explicitly:\n\n```javascript\nChildError.prototype.name = \"FallacyError\"\n```\n\n### Adding behavior to your subclass of StandardError\n\nNow that you've inherited, you can, for example, customize stringifying by\noverwriting `toString` on your subclass.  To get `new HttpError(404)` to print\nitself as `404 Not Found`:\n\n```javascript\nHttpError.prototype.toString = function() {\n  return this.code + \" \" + this.message\n}\n```\n\nLicense\n-------\nStandardError.js is released under a *Lesser GNU Affero General Public License*, which\nin summary means:\n\n- You **can** use this program for **no cost**.\n- You **can** use this program for **both personal and commercial reasons**.\n- You **do not have to share your own program's code** which uses this program.\n- You **have to share modifications** (e.g. bug-fixes) you've made to this\n  program.\n\nFor more convoluted language, see the `LICENSE` file.\n\n\nAbout\n-----\n**[Andri Möll](http://themoll.com)** typed this and the code.  \n[Monday Calendar](https://mondayapp.com) supported the engineering work.\n\nIf you find StandardError.js needs improving, please don't hesitate to type to\nme now at [andri@dot.ee][email] or [create an issue online][issues].\n\n[email]: mailto:andri@dot.ee\n[issues]: https://github.com/moll/js-standard-error/issues\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/moll/js-standard-error.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.1.0"
}
